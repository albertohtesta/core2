image: registry.michelada.io/norden/core-backend:latest

variables:
  RAILS_ENV: "test"
  POSTGRES_PASSWORD: postgres
  DB_USER: postgres
  DB_HOST: postgres
  RABBIT_HOST: rabbitmq
  RABBIT_PORT: 15672
  POSTGRES_HOST_AUTH_METHOD: trust
  DISABLE_SPRING: "true"
  CI: 1
  REDIS_URL: 'redis://redis:6379/1'
  AWS_REGION: 'us-west-1'
  AWS_COGNITO_POOL_ID: <%= ENV["AWS_COGNITO_POOL_ID"] %>
  AWS_COGNITO_CLIENT_ID: <%= ENV["AWS_COGNITO_CLIENT_ID"] %>
  ACCESS_KEY_ID: <%= ENV["ACCESS_KEY_ID"] %>
  SECRET_ACCESS_KEY: <%= ENV["SECRET_ACCESS_KEY"] %>

cache: &global_cache
  key: $CI_COMMIT_REF_SLUG
  policy: pull-push
  paths:
    - public/
    - vendor/

services:
  - postgres
  - redis:latest
  - rabbitmq:latest

stages:
  - build
  - rubocop
  - test
  - publish-image
  - publish-image-qa
  - publish-image-staging
  - publish-image-production
  - deploy
  - deploy-qa
  - deploy-staging
  - deploy-production

build:
  stage: build
  cache:
    <<: *global_cache
  script:
    - bundle install

rubocop:
  stage: rubocop
  cache:
    <<: *global_cache
    policy: pull
  script:
    - bundle install
    - bundle exec rubocop

test:
  stage: test
  cache:
    <<: *global_cache
    policy: pull
  artifacts:
    paths:
      - 'coverage/'
  variables:
    COVERAGE: 1
  script:
    - bundle install
    - bin/rails db:create
    - bin/rails db:test:prepare
    - bin/rails test

publish-image-qa:
  stage: publish-image
  needs: ["test"]
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  before_script:
    - amazon-linux-extras install docker
    - yum install -y sudo gcc-c++ make curl
    - aws --region $AWS_DEFAULT_REGION ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - docker build -f Dockerfile.Qa  .
    - docker push $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-qa:$CI_COMMIT_SHORT_SHA
  only:
    - main
  after_script:
    - echo after script

publish-image-staging:
  stage: publish-image
  needs: ["test"]
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  before_script:
    - amazon-linux-extras install docker
    - yum install -y sudo gcc-c++ make curl
    - aws --region $AWS_DEFAULT_REGION ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-staging:$CI_COMMIT_SHORT_SHA --target builder -t $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-staging:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-staging:$CI_COMMIT_SHORT_SHA
  only:
    - staging
  after_script:
    - echo after script

publish-image-production:
  stage: publish-image
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  needs: ["test"]
  before_script:
    - amazon-linux-extras install docker
    - yum install -y sudo gcc-c++ make curl
    - aws --region $AWS_DEFAULT_REGION ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - docker build --build-arg BUILDKIT_INLINE_CACHE=1 --cache-from $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-production:$CI_COMMIT_SHORT_SHA --target builder -t $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-production:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-production:$CI_COMMIT_SHORT_SHA
  only:
    - develop
  after_script:
    - echo after script

#Update the service with the new task definition 
deploy-qa:
  stage: deploy
  extends: publish-image-qa
  needs: ["build","test","publish-image-qa"]
  script:
    - echo qa deploy
  only:
    - main
  after_script:
    - echo after script

deploy-staging:
  stage: deploy
  extends: publish-image-staging
  needs: ["build","test","publish-image-staging"]
  script:
    - echo staging deploy
  only:
    - staging
  after_script:
    - echo after script

deploy-production:
  stage: deploy
  extends: publish-image-production
  needs: ["build","test","publish-image-production"]
  script:
    - echo production deploy
  only:
    - develop
  after_script:
    - echo after script
