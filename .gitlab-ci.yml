image: registry.michelada.io/norden/core-backend:latest

variables:
  RAILS_ENV: "test"
  POSTGRES_PASSWORD: postgres
  DB_USER: postgres
  DB_HOST: postgres
  RABBIT_HOST: rabbitmq
  RABBIT_PORT: 15672
  POSTGRES_HOST_AUTH_METHOD: trust
  DISABLE_SPRING: "true"
  CI: 1
  REDIS_URL: 'redis://redis:6379/1'
  AWS_REGION: 'us-west-1'
  AWS_COGNITO_POOL_ID: <%= ENV["AWS_COGNITO_POOL_ID"] %>
  AWS_COGNITO_CLIENT_ID: <%= ENV["AWS_COGNITO_CLIENT_ID"] %>
  ACCESS_KEY_ID: <%= ENV["ACCESS_KEY_ID"] %>
  SECRET_ACCESS_KEY: <%= ENV["SECRET_ACCESS_KEY"] %>

cache: &global_cache
  key: $CI_COMMIT_REF_SLUG
  policy: pull-push
  paths:
    - public/
    - vendor/

services:
  - postgres
  - redis:latest
  - rabbitmq:latest

stages:
  - build
  - bundle-audit
  - test
  - publish-image
  - publish-image-qa
  - publish-image-staging
  - publish-image-production
  - deploy
  - deploy-qa
  - deploy-staging
  - deploy-production

build:
  stage: build
  cache:
    <<: *global_cache
  script:
    - bundle install

bundle-audit:
  stage: bundle-audit
  cache:
    <<: *global_cache
  script:
    - bundle install
    - bundle exec bundler-audit

rubocop:
  stage: test
  cache:
    <<: *global_cache
    policy: pull
  script:
    - bundle install
    - bundle exec rubocop

test:
  stage: test
  cache:
    <<: *global_cache
    policy: pull
  artifacts:
    paths:
      - 'coverage/'
  variables:
    COVERAGE: 1
  script:
    - bundle install
    - bundle exec rails db:create
    - bundle exec rails db:test:prepare
    - bundle exec rspec
    - bundle exec rails test

publish-image-qa:
  stage: publish-image
  extends: test
  needs: ["test"]
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  before_script:
    - amazon-linux-extras install docker
    - aws --region $AWS_DEFAULT_REGION ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - sed -i "s;#BUILD_ID#;$CI_COMMIT_SHORT_SHA;" ./build-info.json
    - sed -i "s;#BUILD_DATE#;$(TZ=':UTC' date);" ./build-info.json
    - sed -i "s;#BUILD_BRANCH#;$CI_COMMIT_REF_NAME;" ./build-info.json
    - docker build -f Dockerfile.Qa -t $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-qa:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-qa:$CI_COMMIT_SHORT_SHA
  when: manual
  except:
    - main
    - /^release\/.*$/
  after_script:
    - echo after script

publish-image-staging:
  stage: publish-image
  extends: test
  needs: ["test"]
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  before_script:
    - amazon-linux-extras install docker
    - aws --region $AWS_DEFAULT_REGION ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - sed -i "s;#BUILD_ID#;$CI_COMMIT_SHORT_SHA;" ./build-info.json
    - sed -i "s;#BUILD_DATE#;$(TZ=':UTC' date);" ./build-info.json
    - sed -i "s;#BUILD_BRANCH#;$CI_COMMIT_REF_NAME;" ./build-info.json
    - docker build -f Dockerfile.Staging -t $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-staging:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-staging:$CI_COMMIT_SHORT_SHA
  when: manual
  only:
    - /^release\/.*$/
  after_script:
    - echo after script

publish-image-production:
  stage: publish-image
  extends: test
  needs: ["test"]
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  before_script:
    - amazon-linux-extras install docker
    - aws --region $AWS_DEFAULT_REGION ecr get-login-password | docker login --username AWS --password-stdin $DOCKER_REGISTRY
  script:
    - sed -i "s;#BUILD_ID#;$CI_COMMIT_SHORT_SHA;" ./build-info.json
    - sed -i "s;#BUILD_DATE#;$(TZ=':UTC' date);" ./build-info.json
    - sed -i "s;#BUILD_BRANCH#;$CI_COMMIT_REF_NAME;" ./build-info.json
    - docker build -f Dockerfile -t $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-production:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-production:$CI_COMMIT_SHORT_SHA
  only:
    - main
  after_script:
    - echo after script

#Update the service with the new task definition
deploy-qa:
  stage: deploy
  extends: publish-image-qa
  needs: ["build","test","publish-image-qa"]
  before_script:
    - amazon-linux-extras install docker
    - yum install -y util-linux pciutils usbutils coreutils binutils findutils grep jq
  script:
    - COMPLETE_ROUTE="$DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-qa:$CI_COMMIT_SHORT_SHA"
    - echo `aws ecs describe-task-definition --task-definition $PREFIX-$CI_PROJECT_NAME-qa --region $AWS_DEFAULT_REGION` > input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image="#COMPLETE_ROUTE#"') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"#NAME_SECRET_KEY_VALUE#","value":"#SECRET_KEY_VALUE#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"AWS_ACCESS_KEY_ID","value":"#AWS_ACCESS_KEY_ID#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"AWS_SECRET_ACCESS_KEY","value":"#AWS_SECRET_ACCESS_KEY#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"RAILS_ENV","value":"qa"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"PORT","value":"80"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_URL","value":"amqps://vefqvdwt:EfI20crJRCDGAu41BpRImZAcDfjg3Ies@gull.rmq.cloudamqp.com/vefqvdwt"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_HOST","value":"gull-01.rmq.cloudamqp.com"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_VHOST","value":"vefqvdwt"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_USERNAME","value":"vefqvdwt"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_PASSWORD","value":"EfI20crJRCDGAu41BpRImZAcDfjg3Ies"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"TYPE_FORM_ACCESS_TOKEN","value":"tfp_GvFAv7rEnRyb24AEyu9xyQ4rxW5XgGcMq5CCfqHo6tYw_h2eKzgc9jw7H"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"RAILS_LOG_TO_STDOUT","value":"true"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"SMTP_ADDRESS","value":"#SMTP_ADDRESS#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"SMTP_USER","value":"#SMTP_USER#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"SMTP_PASSWORD","value":"#SMTP_PASSWORD#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"ROLLBAR_ACCESS_TOKEN","value":"da4e07927db64c8da0fd1aaadc7ff0fe"}]') >  input.json
    - sed -i "s@#AWS_ACCESS_KEY_ID#@$AWS_ACCESS_KEY_ID@" input.json
    - sed -i "s@#AWS_SECRET_ACCESS_KEY#@$AWS_SECRET_ACCESS_KEY@" input.json
    - sed -i "s@#SMTP_ADDRESS#@SMTP_ADDRESS@" input.json
    - sed -i "s@#SMTP_USER#@$SMTP_USER@" input.json
    - sed -i "s@#SMTP_PASSWORD#@$SMTP_PASSWORD@" input.json
    - sed -i "s@#NAME_SECRET_KEY_VALUE#@SECRET_KEY_BASE@" input.json
    - sed -i "s@#SECRET_KEY_VALUE#@$RAILS_QA_SECRET_KEY_BASE@" input.json
    - sed -i "s@#COMPLETE_ROUTE#@$COMPLETE_ROUTE@" input.json
    - echo $(cat input.json | jq '.taskDefinition') > input.json
    - echo $(cat input.json | jq  'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities) | del(.registeredAt) | del(.registeredBy)') > input.json
    - aws ecs register-task-definition --cli-input-json file://input.json --region $AWS_DEFAULT_REGION
    - revision=$(aws ecs describe-task-definition --task-definition $PREFIX-$CI_PROJECT_NAME-qa --region $AWS_DEFAULT_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
    - aws ecs update-service --cluster $PREFIX-qa --service $PREFIX-$CI_PROJECT_NAME-qa  --task-definition $PREFIX-$CI_PROJECT_NAME-qa:$revision --region $AWS_DEFAULT_REGION
  when: manual
  except:
    - main
    - /^release\/.*$/
  after_script:
    - echo after script

deploy-staging:
  stage: deploy
  extends: publish-image-staging
  needs: ["build","test","publish-image-staging"]
  before_script:
    - amazon-linux-extras install docker
    - yum install -y util-linux pciutils usbutils coreutils binutils findutils grep jq
  script:
    - COMPLETE_ROUTE="$DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-staging:$CI_COMMIT_SHORT_SHA"
    - echo `aws ecs describe-task-definition --task-definition $PREFIX-$CI_PROJECT_NAME-staging --region $AWS_DEFAULT_REGION` > input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image="#COMPLETE_ROUTE#"') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"#NAME_SECRET_KEY_VALUE#","value":"#SECRET_KEY_VALUE#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"AWS_ACCESS_KEY_ID","value":"#AWS_ACCESS_KEY_ID#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"AWS_SECRET_ACCESS_KEY","value":"#AWS_SECRET_ACCESS_KEY#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"RAILS_ENV","value":"staging"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"PORT","value":"80"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_URL","value":"amqps://wirfzcpt:L6FNqZTsqXPsNArTraTmYXAHEF0v_mGh@gull.rmq.cloudamqp.com/wirfzcpt"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_HOST","value":"gull-01.rmq.cloudamqp.com"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_VHOST","value":"wirfzcpt"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_USERNAME","value":"wirfzcpt"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_PASSWORD","value":"L6FNqZTsqXPsNArTraTmYXAHEF0v_mGh"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"TYPE_FORM_ACCESS_TOKEN","value":"tfp_GvFAv7rEnRyb24AEyu9xyQ4rxW5XgGcMq5CCfqHo6tYw_h2eKzgc9jw7H"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"RAILS_LOG_TO_STDOUT","value":"true"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"SMTP_ADDRESS","value":"#SMTP_ADDRESS#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"SMTP_USER","value":"#SMTP_USER#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"SMTP_PASSWORD","value":"#SMTP_PASSWORD#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"ROLLBAR_ACCESS_TOKEN","value":"5351ff29194248d19469d73f4723244e"}]') >  input.json
    - sed -i "s@#AWS_ACCESS_KEY_ID#@$AWS_ACCESS_KEY_ID_STAGING@" input.json
    - sed -i "s@#AWS_SECRET_ACCESS_KEY#@$AWS_SECRET_ACCESS_KEY_STAGING@" input.json
    - sed -i "s@#SMTP_ADDRESS#@SMTP_ADDRESS@" input.json
    - sed -i "s@#SMTP_USER#@$SMTP_USER@" input.json
    - sed -i "s@#SMTP_PASSWORD#@$SMTP_PASSWORD@" input.json
    - sed -i "s@#NAME_SECRET_KEY_VALUE#@SECRET_KEY_BASE@" input.json
    - sed -i "s@#SECRET_KEY_VALUE#@$RAILS_QA_SECRET_KEY_BASE@" input.json
    - sed -i "s@#COMPLETE_ROUTE#@$COMPLETE_ROUTE@" input.json
    - echo $(cat input.json | jq '.taskDefinition') > input.json
    - echo $(cat input.json | jq  'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities) | del(.registeredAt) | del(.registeredBy)') > input.json
    - aws ecs register-task-definition --cli-input-json file://input.json --region $AWS_DEFAULT_REGION
    - revision=$(aws ecs describe-task-definition --task-definition $PREFIX-$CI_PROJECT_NAME-staging --region $AWS_DEFAULT_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
    - aws ecs update-service --cluster $PREFIX-staging --service $PREFIX-$CI_PROJECT_NAME-staging  --task-definition $PREFIX-$CI_PROJECT_NAME-staging:$revision --region $AWS_DEFAULT_REGION
  when: manual
  only:
    - /^release\/.*$/
  after_script:
    - echo after script

deploy-production:
  stage: deploy
  extends: publish-image-production
  needs: ["build","test","publish-image-production"]
  before_script:
    - amazon-linux-extras install docker
    - yum install -y jq
  script:
    - COMPLETE_ROUTE="$DOCKER_REGISTRY/$PREFIX-$CI_PROJECT_NAME-production:$CI_COMMIT_SHORT_SHA"
    - echo `aws ecs describe-task-definition --task-definition $PREFIX-$CI_PROJECT_NAME-production --region $AWS_DEFAULT_REGION` > input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image="#COMPLETE_ROUTE#"') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"#NAME_SECRET_KEY_VALUE#","value":"#SECRET_KEY_VALUE#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"AWS_ACCESS_KEY_ID","value":"#AWS_ACCESS_KEY_ID#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"AWS_SECRET_ACCESS_KEY","value":"#AWS_SECRET_ACCESS_KEY#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"RAILS_ENV","value":"production"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"PORT","value":"80"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_URL","value":"amqps://jyaocfet:Yc_mXCYNYdeGpTNJOYQX_qc3BoxtICeO@gull.rmq.cloudamqp.com/jyaocfet"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_HOST","value":"gull-01.rmq.cloudamqp.com"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_VHOST","value":"jyaocfet"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_USERNAME","value":"jyaocfet"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"CLOUDAMQP_PASSWORD","value":"Yc_mXCYNYdeGpTNJOYQX_qc3BoxtICeO"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"TYPE_FORM_ACCESS_TOKEN","value":"tfp_2kn2ddMxqQzbDvFfhrA51wJesXF8WosUyeQzEvUvjF7g_3pZ7YAEzmMGjGK"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"RAILS_LOG_TO_STDOUT","value":"true"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"SMTP_ADDRESS","value":"#SMTP_ADDRESS#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"SMTP_USER","value":"#SMTP_USER#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"SMTP_PASSWORD","value":"#SMTP_PASSWORD#"}]') >  input.json
    - echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].environment += [{"name":"ROLLBAR_ACCESS_TOKEN","value":"5351ff29194248d19469d73f4723244e"}]') >  input.json
    - sed -i "s@#AWS_ACCESS_KEY_ID#@$AWS_ACCESS_KEY_ID_PRODUCTION@" input.json
    - sed -i "s@#AWS_SECRET_ACCESS_KEY#@$AWS_SECRET_ACCESS_KEY_PRODUCTION@" input.json
    - sed -i "s@#SMTP_ADDRESS#@SMTP_ADDRESS@" input.json
    - sed -i "s@#SMTP_USER#@$SMTP_USER@" input.json
    - sed -i "s@#SMTP_PASSWORD#@$SMTP_PASSWORD@" input.json
    - sed -i "s@#NAME_SECRET_KEY_VALUE#@SECRET_KEY_BASE@" input.json
    - sed -i "s@#SECRET_KEY_VALUE#@$RAILS_QA_SECRET_KEY_BASE@" input.json
    - sed -i "s@#COMPLETE_ROUTE#@$COMPLETE_ROUTE@" input.json
    - echo $(cat input.json | jq '.taskDefinition') > input.json
    - echo $(cat input.json | jq  'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities) | del(.registeredAt) | del(.registeredBy)') > input.json
    - aws ecs register-task-definition --cli-input-json file://input.json --region $AWS_DEFAULT_REGION
    - revision=$(aws ecs describe-task-definition --task-definition $PREFIX-$CI_PROJECT_NAME-production --region $AWS_DEFAULT_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
    - aws ecs update-service --cluster $PREFIX-production --service $PREFIX-$CI_PROJECT_NAME-production  --task-definition $PREFIX-$CI_PROJECT_NAME-production:$revision --region $AWS_DEFAULT_REGION
  only:
    - main
  after_script:
    - echo after script
